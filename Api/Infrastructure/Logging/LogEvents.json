[
    {"id": 1001, "name": "GeoCoderException", "level": "Error", "template": "Getting google response exception"},
    {"id": 1006, "name": "InvitationCreated", "level": "Information", "template": "The invitation with type {InvitationType} created for the user '{Email}'", "argumentTypes": ["HappyTravel.Edo.Common.Enums.UserInvitationTypes", "string"]},
    {"id": 1007, "name": "AgentRegistrationFailed", "level": "Warning", "template": "Agent registration failed with error `{Error}`", "argumentTypes": ["string"]},
    {"id": 1008, "name": "AgentRegistrationSuccess", "level": "Information", "template": "Agent {Email} successfully registered", "argumentTypes": ["string"]},
    {"id": 1009, "name": "PayfortClientException", "level": "Critical", "template": "Payfort client exception"},
    {"id": 1010, "name": "AgencyAccountCreationSuccess", "level": "Information", "template": "Successfully created account for agency: '{AgencyId}', account id: {AccountId}", "argumentTypes": ["int", "int"]},
    {"id": 1011, "name": "AgencyAccountCreationFailed", "level": "Error", "template": "Failed to create account for agency {AgencyId}, error {Error}", "argumentTypes": ["int", "string"]},
    {"id": 1012, "name": "EntityLockFailed", "level": "Critical", "template": "Failed to lock entity {EntityType} with id: {EntityId}", "argumentTypes": ["string", "string"]},
    {"id": 1013, "name": "PayfortError", "level": "Error", "template": "Error deserializing payfort response: '{Content}'", "argumentTypes": ["string"]},
    {"id": 1014, "name": "ExternalPaymentLinkSendSuccess", "level": "Information", "template": "Successfully sent e-mail to {Email}", "argumentTypes": ["string"]},
    {"id": 1015, "name": "ExternalPaymentLinkSendFailed", "level": "Error", "template": "Error sending email to {Email}: {Error}", "argumentTypes": ["string", "string"]},
    {"id": 1017, "name": "UnableGetBookingDetailsFromNetstormingXml", "level": "Warning", "template": "Failed to get booking details from the Netstorming xml: {Xml}", "argumentTypes": ["string"]},
    {"id": 1018, "name": "UnableToAcceptNetstormingRequest", "level": "Warning", "template": "Unable to accept netstorming request"},
    {"id": 1020, "name": "BookingFinalizationFailure", "level": "Error", "template": "The booking finalization with the reference code: '{ReferenceCode}' has been failed with a message: {Message}", "argumentTypes": ["string", "string"]},
    {"id": 1021, "name": "BookingFinalizationPaymentFailure", "level": "Warning", "template": "The booking with reference code: '{ReferenceCode}' hasn't been paid", "argumentTypes": ["string"]},
    {"id": 1022, "name": "BookingFinalizationSuccess", "level": "Information", "template": "Successfully booked using account. Reference code: '{ReferenceCode}'", "argumentTypes": ["string"]},
    {"id": 1023, "name": "BookingFinalizationException", "level": "Critical", "template": "Booking finalization exception"},
    {"id": 1030, "name": "BookingResponseProcessFailure", "level": "Error", "template": "Booking response process failure. Error: {Error}", "argumentTypes": ["string"]},
    {"id": 1031, "name": "BookingResponseProcessSuccess", "level": "Information", "template": "The booking response with the reference code '{ReferenceCode} has been processed with message {Message}", "argumentTypes": ["string", "string"]},
    {"id": 1032, "name": "BookingResponseProcessStarted", "level": "Information", "template": "Start the booking response processing with the reference code '{ReferenceCode}'. Old status: {Status}", "argumentTypes": ["string", "HappyTravel.Edo.Common.Enums.BookingStatuses"]},
    {"id": 1040, "name": "BookingCancelFailure", "level": "Critical", "template": "Failed to cancel a booking with reference code: '{ReferenceCode}'. Error: {Error}", "argumentTypes": ["string", "string"]},
    {"id": 1041, "name": "BookingCancelSuccess", "level": "Information", "template": "Successfully cancelled a booking with reference code: '{ReferenceCode}'", "argumentTypes": ["string"]},
    {"id": 1042, "name": "BookingAlreadyCancelled", "level": "Information", "template": "Skipping cancellation for a booking with reference code: '{ReferenceCode}'. Already cancelled.", "argumentTypes": ["string"]},
    {"id": 1050, "name": "BookingRegistrationSuccess", "level": "Information", "template": "Successfully registered a booking with reference code: '{ReferenceCode}", "argumentTypes": ["string"]},
    {"id": 1051, "name": "BookingRegistrationFailure", "level": "Error", "template": "Failed to register a booking. AvailabilityId: '{AvailabilityId}'. Itinerary number: {ItineraryNumber}. Passenger name: {MainPassengerName}. Error: {Error}", "argumentTypes": ["System.Guid", "string", "string", "string"]},
    {"id": 1060, "name": "BookingByAccountSuccess", "level": "Information", "template": "Booking by account success"},
    {"id": 1061, "name": "BookingByAccountFailure", "level": "Error", "template": "Failed to book using account. Reference code: '{ReferenceCode}'. Error: {Error}", "argumentTypes": ["string", "string"]},
    {"id": 1070, "name": "BookingRefreshStatusSuccess", "level": "Information", "template": "Successfully refreshed status for a booking with reference code: '{ReferenceCode}'. Old status: {OldStatus}. New status: {Status}", "argumentTypes": ["string", "HappyTravel.Edo.Common.Enums.BookingStatuses", "HappyTravel.EdoContracts.Accommodations.Enums.BookingStatusCodes"]},
    {"id": 1071, "name": "BookingRefreshStatusFailure", "level": "Error", "template": "Failed to refresh status for a booking with reference code: '{ReferenceCode}' while getting info from a supplier. Error: {Error}", "argumentTypes": ["string", "string"]},
    {"id": 1072, "name": "BookingConfirmationFailure", "level": "Critical", "template": "Booking '{ReferenceCode} confirmation failed: '{Error}", "argumentTypes": ["string", "string"]},
    {"id": 1073, "name": "BookingEvaluationFailure", "level": "Warning", "template": "EvaluateOnConnector returned status code: {Status}, error: {Error}", "argumentTypes": ["System.Nullable<int>", "string"]},
    {"id": 1074, "name": "BookingEvaluationCancellationPoliciesFailure", "level": "Error", "template": "EvaluateOnConnector returned cancellation policies with 0 penalty"},
    {"id": 1100, "name": "ExternalAdministratorAuthorizationSuccess", "level": "Debug", "template": "Successfully authorized external administrator"},
    {"id": 1101, "name": "AdministratorAuthorizationFailure", "level": "Warning", "template": "Administrator authorization failed"},
    {"id": 1103, "name": "InternalAdministratorAuthorizationSuccess", "level": "Debug", "template": "Successfully authorized administrator '{Email}'", "argumentTypes": ["string"]},
    {"id": 1110, "name": "AgentAuthorizationSuccess", "level": "Debug", "template": "Successfully authorized agent '{Email}' for '{Permissions}'", "argumentTypes": ["string", "string"]},
    {"id": 1111, "name": "AgentAuthorizationFailure", "level": "Warning", "template": "Agent authorization failure: '{Error}'", "argumentTypes": ["string"]},
    {"id": 1120, "name": "CounterpartyAccountCreationFailure", "level": "Error", "template": "Failed to create account for counterparty {Id}, error {Error}", "argumentTypes": ["int", "string"]},
    {"id": 1121, "name": "CounterpartyAccountCreationSuccess", "level": "Information", "template": "Successfully created account for counterparty: '{CounterpartyId}', account id: {AccountId}", "argumentTypes": ["int", "int"]},
    {"id": 1125, "name": "ServiceAccountAuthorizationSuccess", "level": "Debug", "template": "Service account '{ClientId}' authorized successfully", "argumentTypes": ["string"]},
    {"id": 1126, "name": "ServiceAccountAuthorizationFailure", "level": "Warning", "template": "Service account authorization failed. Error: {Error}", "argumentTypes": ["string"]},
    {"id": 1130, "name": "LocationNormalized", "level": "Information", "template": "Location normalized"},
    {"id": 1140, "name": "MultiSupplierAvailabilitySearchStarted", "level": "Information", "template": "Starting availability search with id '{SearchId}'", "argumentTypes": ["System.Guid"]},
    {"id": 1141, "name": "SupplierAvailabilitySearchStarted", "level": "Information", "template": "Availability search with id '{SearchId}' on supplier '{Supplier}' started", "argumentTypes": ["System.Guid", "HappyTravel.SuppliersCatalog.Suppliers"]},
    {"id": 1142, "name": "SupplierAvailabilitySearchSuccess", "level": "Information", "template": "Availability search with id '{SearchId}' on supplier '{Supplier}' finished successfully with '{ResultCount}' results", "argumentTypes": ["System.Guid", "HappyTravel.SuppliersCatalog.Suppliers", "int"]},
    {"id": 1143, "name": "SupplierAvailabilitySearchFailure", "level": "Warning", "template": "Availability search with id '{SearchId}' on supplier '{Supplier}' finished with state '{TaskState}', error '{Error}'", "argumentTypes": ["System.Guid", "HappyTravel.SuppliersCatalog.Suppliers", "HappyTravel.Edo.Api.Models.Availabilities.AvailabilitySearchTaskState", "string"]},
    {"id": 1145, "name": "SupplierAvailabilitySearchException", "level": "Error", "template": "Supplier availability search exception on supplier '{Supplier}'", "argumentTypes": ["HappyTravel.SuppliersCatalog.Suppliers"]},
    {"id": 1150, "name": "CounterpartyStateAuthorizationSuccess", "level": "Debug", "template": "Successfully checked counterparty state for agent {Email}", "argumentTypes": ["string"]},
    {"id": 1151, "name": "CounterpartyStateAuthorizationFailure", "level": "Warning", "template": "Counterparty of agent '{Email}' has wrong state {State}", "argumentTypes": ["string", "HappyTravel.Edo.Common.Enums.CounterpartyStates"]},
    {"id": 1200, "name": "DefaultLanguageKeyIsMissingInFieldOfLocationsTable", "level": "Warning", "template": "Default language key is missing in field of locations table"},
    {"id": 1300, "name": "ConnectorClientException", "level": "Critical", "template": "Connector client exception"},
    {"id": 1301, "name": "SupplierConnectorRequestError", "level": "Error", "template": "Error executing connector request to {Url}: '{Error}', status code: '{Status}'", "argumentTypes": ["string", "string", "System.Nullable<int>"]},
    {"id": 1302, "name": "SupplierConnectorRequestDuration", "level": "Information", "template": "Request to {Url} finished at {ElapsedMilliseconds} ms.", "argumentTypes": ["string", "long"]},
    {"id": 1310, "name": "GetTokenForConnectorError", "level": "Error", "template": "Something went wrong while requesting the access token. Error: {Error}. Using existing token: '{Token}' with expiry date '{ExpiryDate}'", "argumentTypes": ["string", "string", "System.DateTime"]},
    {"id": 1311, "name": "UnauthorizedConnectorResponse", "level": "Debug", "template": "Unauthorized response was returned from '{RequestUri}'. Refreshing token...", "argumentTypes": ["string"]},
    {"id": 1400, "name": "CaptureMoneyForBookingSuccess", "level": "Information", "template": "Successfully captured money for a booking with reference code: '{ReferenceCode}'", "argumentTypes": ["string"]},
    {"id": 1401, "name": "CaptureMoneyForBookingFailure", "level": "Error", "template": "Failed to capture money for a booking with reference code: '{ReferenceCode}'. Error: Invalid payment method: {PaymentType}", "argumentTypes": ["string", "HappyTravel.Edo.Common.Enums.PaymentTypes"]},
    {"id": 1402, "name": "ChargeMoneyForBookingSuccess", "level": "Information", "template": "Successfully charged money for a booking with reference code: '{ReferenceCode}'", "argumentTypes": ["string"]},
    {"id": 1403, "name": "ChargeMoneyForBookingFailure", "level": "Error", "template": "Failed to charge money for a booking with reference code: '{ReferenceCode} with error {Error}", "argumentTypes": ["string", "string"]},
    {"id": 1410, "name": "ProcessPaymentChangesForBookingSuccess", "level": "Information", "template": "Successfully processes payment changes. Old payment status: {OldPaymentStatus}. New payment status: {PaymentStatus}. Payment: '{PaymentReferenceCode}'. Booking reference code: '{BookingReferenceCode}'", "argumentTypes": ["HappyTravel.Edo.Common.Enums.BookingPaymentStatuses", "HappyTravel.Edo.Common.Enums.PaymentStatuses", "string", "string"]},
    {"id": 1411, "name": "ProcessPaymentChangesForBookingSkip", "level": "Warning", "template": "Skipped booking status update while processing payment changes. Payment status: {PaymentStatus}. Payment: '{PaymentReferenceCode}'. Booking reference code: '{BookingReferenceCode}'", "argumentTypes": ["HappyTravel.Edo.Common.Enums.PaymentStatuses", "string", "string"]},
    {"id": 1412, "name": "ProcessPaymentChangesForBookingFailure", "level": "Error", "template": "Failed to process payment changes, could not find the corresponding booking. Payment status: {Status}. Payment: '{ReferenceCode}'", "argumentTypes": ["HappyTravel.Edo.Common.Enums.PaymentStatuses", "string"]},
    {"id": 1501, "name": "ElasticAnalyticsEventSendError", "level": "Error", "template": "Sending event to elasticsearch failed"},
    {"id": 1601, "name": "MapperClientException", "level": "Error", "template": "Mapper client exception"},
    {"id": 1602, "name": "MapperClientErrorResponse", "level": "Error", "template": "Request to mapper failed: {Message}:{StatusCode}. Requested HtIds {HtIds}", "argumentTypes": ["string","int", "string[]"]},
    {"id": 1701, "name": "CounterpartyAccountAddedNotificationFailure", "level": "Error", "template": "Counterparty {CounterpartyId} account added notification failed with error {Error}", "argumentTypes": ["int","string"]},
    {"id": 1702, "name": "AgentRegistrationNotificationFailure", "level": "Error", "template": "Agent registration notification failure with error {Error}", "argumentTypes": ["string"]},
    {"id": 1703, "name": "ChildAgencyRegistrationNotificationFailure", "level": "Error", "template": "Child agency registration notification failed"},
    {"id": 1704, "name": "CounterpartyAccountSubtractedNotificationFailure", "level": "Error", "template": "Counterparty {CounterpartyId} account subtracted notification failed with error {Error}", "argumentTypes": ["int","string"]},
    {"id": 1705, "name": "CounterpartyAccountIncreasedManuallyNotificationFailure", "level": "Error", "template": "Counterparty {CounterpartyId} account increasedManually notification failed with error {Error}", "argumentTypes": ["int","string"]},
    {"id": 1706, "name": "CounterpartyAccountDecreasedManuallyNotificationFailure", "level": "Error", "template": "Counterparty {CounterpartyId} account decreasedManually notification failed with error {Error}", "argumentTypes": ["int","string"]},
    {"id": 1707, "name": "ExternalPaymentLinkGenerationSuccess", "level": "Information", "template": "Successfully generated payment link for {Email}", "argumentTypes": ["string"]},
    {"id": 1708, "name": "ExternalPaymentLinkGenerationFailed", "level": "Error", "template": "Error generating payment link for {Email}: {Error}", "argumentTypes": ["string", "string"]},
    {"id": 1709, "name": "GetAccommodationByHtIdFailed", "level": "Error", "template": "Error getting accommodation for HtId '{HtId}': error: {Error}", "argumentTypes": [ "string", "string" ]},
    {"id": 1800, "name": "SendConfirmationEmailFailure", "level": "Error", "template": "Error sending booking confirmation email to property owner. Received empty list of email addresses from mapper. Reference code {ReferenceCode}", "argumentTypes": [ "string" ]},
    {"id": 1801, "name": "ConnectorClientUnexpectedResponse", "level": "Error", "template":  "Unexpected response received from connector. StatusCode: `{StatusCode}`, request uri: `{Uri}`, response: {Response}", "argumentTypes": [ "System.Net.HttpStatusCode", "System.Uri", "string" ]},
    {"id": 1802, "name": "MapperClientUnexpectedResponse", "level": "Error", "template":  "Unexpected response received from mapper. StatusCode: `{StatusCode}`, request uri: `{Uri}`, response: {Response}", "argumentTypes": [ "System.Net.HttpStatusCode", "System.Uri", "string" ]},
    {"id": 1803, "name": "MapperClientRequestTimeout", "level": "Warning", "template":  "Request to mapper failed with timeout"}
]